1. What is the purpose of having an individual handler function for each
exception/interrupt? (i.e., if all exceptions/interrupts were delivered to the
same handler, what feature that exists in the current implementation could not
be provided?)

The CPU does not push data about which trap or interrupt was triggered when it
transfers control to the interrupt handler. For example, the general protection
fault pushes an error code while the divide by zero fault does not. In order to
support this kind of behavior, we need to have separate handlers in the
interrupt vector table which allows us to implement specialized behavior. This
also would make it difficult to treat the double fault handler correctly as it
always has a zero for the error code.

2. Did you have to do anything to make the user/softint program behave correctly? The grade script expects it to produce a general protection fault (trap 13), but softint‘s code says int $14. Why should this produce interrupt vector 13? What happens if the kernel actually allows softint‘s int $14 instruction to invoke the kernel’s page fault handler (which is interrupt vector 14)?