PART A:

	1. What is the purpose of having an individual handler function for each
	exception/interrupt? (i.e., if all exceptions/interrupts were delivered to the
	same handler, what feature that exists in the current implementation could not
	be provided?)

	 > The CPU does not push data about which trap or interrupt was triggered when it
	 > transfers control to the interrupt handler. For example, the general protection
	 > fault pushes an error code while the divide by zero fault does not. In order to
	 > support this kind of behavior, we need to have separate handlers in the
	 > interrupt vector table which allows us to implement specialized behavior. This
	 > also would make it difficult to treat the double fault handler correctly as it
	 > always has a zero for the error code.



	2. Did you have to do anything to make the user/softint program behave
	correctly? The grade script expects it to produce a general protection fault 
	(trap 13), but softint‘s code says int $14. Why should this produce interrupt
	vector 13? What happens if the kernel actually allows softint‘s int $14
	instruction to invoke the kernel’s page fault handler (which is interrupt vector
	14)?

	 > We didn't have to do anything to protect interrupt number 14. The SETGATE
	 > command limits int $14 to CPL 0. User mode code that attempts to call into
	 > interrupt 14 will trigger a general protection fault. This is a good security
	 > measure as it is insecure to let user mode code call into a trap or interrupt 
	 > (other than breakpoint).
	 
	 > If we enabled user mode access to int $14 through setting SETGATE to allow CPL
	 > 3, the code would become insecure as it would at best perhaps make the system
	 > unecessarily slower (by triggering a page fault) and at worst lead to a security
	 > vulnrability where user mode code could potentially control and influence the
	 > memory management logic and paging behavior.



	Challenge

	For the challenge, I chose to do the first one. The goal of this challenge was
	to remove redundant code between trapentry.S and trap.c.

	Two steps were required in implementing this challenge:
	 1. I added an array to trapentry.S that served as a mapping from trap number to
	    a pointer to the trap handler. This was constructed through modification of
	    the TRAPHANDLER and TRAPHANDLER_NOEC macros.

	>        #define TRAPHANDLER(name, num)                                          \
	>     +      .data;                                                              \
	>     +          .long name;                                                     \
	>     +      .text;                                                              \
	>                .globl name;            /* define global symbol for 'name' */   \
	>                .type name, @function;  /* symbol type is function */           \
	>                .align 2;               /* align function definition */         \
	>                name:                   /* function starts here */              \
	>                pushl $(num);                                                   \
	>     ~          jmp _alltraps;

	>        #define TRAPHANDLER_NOEC(name, num)                                     \
	>     +      .data;                                                              \
	>     +          .long name;                                                     \
	>     +      .text;                                                              \
	>               .globl name;                                                     \
	>                .type name, @function;                                          \
	>                .align 2;                                                       \
	>                name:                                                           \
	>                pushl $0;                                                       \
	>                pushl $(num);                                                   \
	>     ~          jmp _alltraps;

	>     +  .data
	>     +  .globl trapfuncs
	>     +  trapfuncs:
	>            .text
	>            TRAPHANDLER_NOEC(trap_divide, T_DIVIDE)
	>            ...


	 2. I replaced the SETGATE declarations in trap.c with a for loop using the
	    array specified above in trapentry.S to map trap numbers to the handlers.
	    Trap number 3 (breakpoint) was handled separately as it is accessible from CPL
	    3 as compared to CPL 0.

	>     +  extern uintptr_t trapfuncs[];
	>     ~  SETGATE(idt[T_BRKPT], 0, GD_KT, trapfuncs[T_BRKPT], 3) // INT 3 instruction
	>     +  for (int i = 0; i < 20; ++i)
	>     +      if (i != T_BRKPT)
	>     +          SETGATE(idt[i], 0, GD_KT, trapfuncs[i], 0);rap function array

	This simplified code by reducing the duplication of entries in the two sections
	and also reduced coupling by a bit as we can add another trap by adding another
	entry in trapentry.S.

PART B:
	
	3. The break point test case will either generate a break point exception or a general
	protection fault depending on how you initialized the break point entry in the IDT (i.e.,
	your call to SETGATE from trap_init). Why? How do you need to set it up in order to get
	the breakpoint exception to work as specified above and what incorrect setup would cause
	it to trigger a general protection fault?

	The general protection fault is not triggered as SETGATE is called for T_BRKPT
	at CPL 3 versus CPL 0 which was used for other traps. Similar settings were used
	for T_SYSCALL as well. This CPL setting protects most hardware interrupts from
	being called from user-mode code. However, the breakpoint trap can be called
	from user-mode code and by setting up the CPL to 3, a breakpoint exception works
	as expected without triggering a general protection fault. If this was set to
	CPL 0, then the general protection fault could be triggered.

	>	SETGATE(idt[T_BRKPT], 0, GD_KT, trapfuncs[T_BRKPT], 3);
	
	4. What do you think is the point of these mechanisms, particularly in light of what the
	user/softint test program does?

	The CPL settings protects the system from errant code. As all interrupts are
	gated through a permission check (CPL in SETGATE), this prevents malicious code
	from abusing the interrupt interface. So if a user-mode program calls a
	protected interrupt, then a general protection fault is raised.